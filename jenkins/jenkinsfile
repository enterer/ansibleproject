pipeline {
    agent any

    options {
        timestamps()               // Adds timestamps to console output
        ansiColor('xterm')         // Enables colorized console output
        disableConcurrentBuilds()  // (optional) Prevents overlapping builds
        buildDiscarder(logRotator(numToKeepStr: '10')) // (optional) Keep only last 10 builds
    }

    environment {
        ARTIFACT_NAME = "app.tar.gz"
        HASH_FILE = "hash.txt"
        GIT_COMMIT_SHORT = ''
        GIT_COMMIT_MSG = ''
    }

    stages {
        stage('üîÑ Checkout Source') {
            steps {
                script {
                    echo "üì• Checking out source code..."
                    git branch: 'dev', url: 'https://github.com/enterer/ansibleproject.git'

                    GIT_COMMIT_SHORT = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                    GIT_COMMIT_MSG = sh(returnStdout: true, script: "git log -1 --pretty=%B").trim()
                }
            }
        }

        stage('üì¶ Package Flask App') {
            steps {
                echo "üóú Packaging Flask app and generating hash..."
                sh '''
                cd app
                tar -czvf $ARTIFACT_NAME app.py requirements.txt templates/ init_db.js
                sha256sum $ARTIFACT_NAME > $HASH_FILE
                '''
            }
        }

        stage('üìÅ Archive Artifacts') {
            steps {
                echo "üìÇ Archiving artifacts for integrity and audit trail..."
                archiveArtifacts artifacts: "app/$ARTIFACT_NAME, app/$HASH_FILE", fingerprint: true
            }
        }

        stage('üöÄ Deploy with Ansible') {
            steps {
                echo "üõ† Running Ansible deployment..."
                sh '''
                cd ansible
                ansible-playbook -i inventory.ini site.yml
                '''
            }
        }
    }

    post {
        always {
            script {
                def status = currentBuild.currentResult
                def colorCode = status == 'SUCCESS' ? '#2eb886' :
                                (status == 'FAILURE' ? '#e01e5a' : '#ecb22e')

                def consoleLog = currentBuild.rawBuild.getLog(10).join("\\n").replace("\"", "'")

                def slackMessage = """
                {
                  "attachments": [
                    {
                      "color": "${colorCode}",
                      "blocks": [
                        {
                          "type": "section",
                          "text": {
                            "type": "mrkdwn",
                            "text": "*Pipeline Result:* ${status}"
                          }
                        },
                        {
                          "type": "section",
                          "fields": [
                            {
                              "type": "mrkdwn",
                              "text": "*Job:*\\n${env.JOB_NAME}"
                            },
                            {
                              "type": "mrkdwn",
                              "text": "*Build:*\\n#${env.BUILD_NUMBER}"
                            },
                            {
                              "type": "mrkdwn",
                              "text": "*Commit:*\\n${GIT_COMMIT_SHORT} - ${GIT_COMMIT_MSG.take(50)}"
                            }
                          ]
                        },
                        {
                          "type": "section",
                          "text": {
                            "type": "mrkdwn",
                            "text": "*Last 10 lines of console:*\\n\\n```\\n${consoleLog}\\n```"
                          }
                        },
                        {
                          "type": "actions",
                          "elements": [
                            {
                              "type": "button",
                              "text": {
                                "type": "plain_text",
                                "text": "View in Jenkins"
                              },
                              "url": "${env.BUILD_URL}"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
                """

                withCredentials([string(credentialsId: 'SLACK_WEBHOOK_URL', variable: 'SLACK_WEBHOOK')]) {
                    httpRequest httpMode: 'POST',
                                url: "${SLACK_WEBHOOK}",
                                contentType: 'APPLICATION_JSON',
                                requestBody: slackMessage
                }
            }
        }
    }
}
